#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

int main() {
    int n, m;
    cin >> n >> m;
    vector<int> a(n), b(m);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    for (int i = 0; i < m; ++i) {
        cin >> b[i];
    }

    sort(a.begin(), a.end());
    sort(b.begin(), b.end());

    vector<int> candidates;
    candidates.push_back(0);
    for (int num : a) {
        candidates.push_back(num);
    }
    for (int num : b) {
        candidates.push_back(num);
    }
    sort(candidates.begin(), candidates.end());
    candidates.erase(unique(candidates.begin(), candidates.end()), candidates.end());

    long long max_diff = LLONG_MIN;
    int best_D = 0;

    for (int D : candidates) {
        long long count_a = upper_bound(a.begin(), a.end(), D) - a.begin();
        long long count_b = upper_bound(b.begin(), b.end(), D) - b.begin();

        long long score_a = count_a + 2 * (n - count_a);
        long long score_b = count_b + 2 * (m - count_b);

        long long diff = score_a - score_b;

        if (diff > max_diff) {
            max_diff = diff;
            best_D = D;
        } else if (diff == max_diff && D < best_D) {
            best_D = D;
        }
    }

    // Check D beyond the maximum element in a and b
    int max_elem = max(a.back(), b.back());
    long long count_a = n;
    long long count_b = m;

    long long score_a = count_a + 2 * (n - count_a);
    long long score_b = count_b + 2 * (m - count_b);

    long long diff = score_a - score_b;

    if (diff > max_diff) {
        max_diff = diff;
        best_D = max_elem + 1;
    } else if (diff == max_diff && (max_elem + 1) < best_D) {
        best_D = max_elem + 1;
    }

    cout << best_D << endl;

    return 0;
}
